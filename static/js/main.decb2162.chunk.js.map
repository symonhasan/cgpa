{"version":3,"sources":["Componants/Header.js","Componants/Form.js","Componants/Table.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","cgpa","NavLink","onClick","func","href","link","name","Navigation","className","Header","TextField","type","placeholder","id","Button","Form","TableData","data","Table","this","list","map","course","index","credit","gpa","key","renderTableData","Component","App","state","subjectList","alertMsg","showError","renderError","setState","resetShowMsg","addCourse","document","getElementById","value","parseFloat","isNaN","resetAll","courseList","totalCredit","i","length","gpaSum","toFixed","calculateCGPA","TableShow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.decb2162.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Title = (props) => {\r\n    return <h2>CGPA <span>{props.cgpa}</span></h2>\r\n}\r\n\r\nconst NavLink = (props) => {\r\n    return (\r\n        <a onClick={props.func} href={props.link}>\r\n             {props.name}\r\n        </a>\r\n    );\r\n}\r\n\r\nconst Navigation = (props) => {\r\n    return (\r\n        <div className=\"nav-area\">\r\n            <NavLink name=\"GITHUB\" link={props.link} />\r\n            <NavLink name=\"RESET\" func={props.func}  />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className=\"top-header\">\r\n            <Title cgpa={props.cgpa} />\r\n            <Navigation func={props.func} link={props.link}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst TextField = (props) => {\r\n    return (\r\n        <input type=\"text\"  placeholder={props.placeholder} id={props.id} />\r\n    );\r\n}\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button onClick={props.func}>{props.name}</button>\r\n    );\r\n}\r\n\r\nconst Form = (props) => {\r\n\r\n    return (\r\n        <div className=\"form-area\">\r\n            <TextField placeholder=\"Course Title\" id=\"course-title\" />\r\n            <TextField placeholder=\"Credit Hour\" id=\"credit-hour\" />\r\n            <TextField placeholder=\"GPA\" id=\"gpa\"/>\r\n            <Button name=\"Add\" func={props.func}  />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React, { Component } from \"react\";\r\nimport \"./Table.css\";\r\n\r\nexport const TableData = (props) => {\r\n    return <td>{props.data}</td>;\r\n};\r\n\r\nexport class Table extends Component {\r\n    renderTableData() {\r\n        const courseList = this.props.list;\r\n        return courseList.map((course, index) => {\r\n            const { name, credit, gpa } = course;\r\n            return (\r\n                <tr key={index}>\r\n                    <TableData data={index + 1} />\r\n                    <TableData data={name} />\r\n                    <TableData data={credit} />\r\n                    <TableData data={gpa} />\r\n                </tr>\r\n            );\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <table className=\"course-list\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>SL</th>\r\n                        <th>Course Name</th>\r\n                        <th>Credit Hour</th>\r\n                        <th>GPA</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{this.renderTableData()}</tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./Componants/Header\";\r\nimport Form from \"./Componants/Form\";\r\nimport { Table } from \"./Componants/Table\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        subjectList: [],\r\n        alertMsg: \"One or more fields are empty\",\r\n        showError: false\r\n    };\r\n\r\n    renderError = () => {\r\n      this.setState({\r\n        showError: true\r\n      });\r\n    }\r\n    resetShowMsg = () => {\r\n      this.setState({\r\n        showError: false\r\n      });\r\n    }\r\n\r\n    addCourse = () => {\r\n        let name = document.getElementById(\"course-title\").value;\r\n        let credit = parseFloat(document.getElementById(\"credit-hour\").value);\r\n        let gpa = parseFloat(document.getElementById(\"gpa\").value);\r\n        if( name !== \"\" && !isNaN( credit ) && !isNaN( gpa ) ){\r\n          this.setState({\r\n              subjectList: [\r\n                  ...this.state.subjectList,\r\n                  {\r\n                      name: name,\r\n                      credit: credit,\r\n                      gpa: gpa,\r\n                  },\r\n              ],\r\n              showError: false\r\n          });\r\n        }\r\n        else if( name === \"\" ){\r\n            this.setState({\r\n                alertMsg: \"Course title is empty\",\r\n                showError: true\r\n            });\r\n        }\r\n        else if( isNaN( credit ) ){\r\n            this.setState({\r\n                alertMsg: \"Entered credit hour is not a number\",\r\n                showError: true\r\n            });\r\n        }\r\n        else if( isNaN( gpa ) ){\r\n            this.setState({\r\n                alertMsg: \"Entered gpa is not a number\",\r\n                showError: true\r\n            });\r\n        }\r\n        \r\n    };\r\n    resetAll = () => {\r\n        this.setState({\r\n            subjectList: [],\r\n            showError: false\r\n        });\r\n    };\r\n\r\n    calculateCGPA() {\r\n        let courseList = this.state.subjectList;\r\n        let totalCredit = 0;\r\n        for (let i = 0; i < courseList.length; i++)\r\n            totalCredit += courseList[i].credit;\r\n        let gpaSum = 0;\r\n        for (let i = 0; i < courseList.length; i++)\r\n            gpaSum += courseList[i].credit * courseList[i].gpa;\r\n        if (totalCredit === 0) return \"\";\r\n        return (gpaSum / totalCredit).toFixed( 2 );\r\n    }\r\n\r\n    TableShow() {\r\n        if (this.state.subjectList.length !== 0) {\r\n            return <Table list={this.state.subjectList} />;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Header cgpa={this.calculateCGPA()} func={this.resetAll} link=\"https://github.com/symonhasan/cgpa\" />\r\n                  <div className=\"error\">\r\n                      {\r\n                        this.state.showError ? <p onClick={this.resetShowMsg}>{this.state.alertMsg}</p> : null\r\n                      }\r\n                  </div>\r\n                <div className=\"AppBody\">\r\n                    <div className=\"course-add\">\r\n                        <Form func={this.addCourse} />\r\n                        <div className=\"info\">\r\n                            <p>\r\n                                This project is under <strong>MIT License</strong> and completely runs into your browser therefore no information won't send to any sever.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    {this.TableShow()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}